#!/bin/bash

vuv_check() {
    if ! command -v uv &> /dev/null; then
        echo "Error: uv is not installed" >&2
        return 1
    fi
}

vuv_set_default_index() {
    if [ -z "$1" ]; then
        echo "Usage: vuv config --default-index <index_url>" >&2
        return 1
    fi

    if [ -f "$VUV_CONFIG" ]; then
        if grep -q "^export DEFAULT_INDEX=" "$VUV_CONFIG"; then
            sed -i "s|^export DEFAULT_INDEX=.*|export DEFAULT_INDEX=$1|" "$VUV_CONFIG"
        else
            echo "export DEFAULT_INDEX=$1" >> "$VUV_CONFIG"
        fi
    else
        echo "export DEFAULT_INDEX=$1" > "$VUV_CONFIG"
    fi

    echo "Default index set to: $1"
}

vuv_create() {
    while getopts ":n:p:" opt; do
        case $opt in
            n) uv_environment="$OPTARG"
            ;;
            p) python_version="$OPTARG"
            ;;
            \?) echo "Invalid option -$OPTARG" >&2
                return 1
            ;;
        esac
    done

    if [ -d "$VUV_VENV/$uv_environment" ]; then
        echo "uv environment $uv_environment already exists"
        return 1
    fi

    if [ -z "$uv_environment" ] || [ -z "$python_version" ]; then
        echo "Usage: vuv create -n <uv_environment> -p <python_version>"
        return 1
    fi

    echo "Creating uv environment: $uv_environment with Python $python_version"
    mkdir -p "$VUV_VENV" || return 1
    uv venv "$VUV_VENV/$uv_environment" --python "$python_version" --seed || return 1

    echo "Environment setup complete for uv environment: $uv_environment with Python $python_version"
    echo "Run 'vuv activate $uv_environment' to activate the environment"
}

vuv_remove() {
    local uv_environment
    # 手动解析参数
    if [[ "$1" == "-n" ]]; then
        if [[ -z "$2" ]]; then
            echo "Error: -n requires an argument (environment name)" >&2
            return 1
        fi
        uv_environment="$2"
    else
        echo "Usage: vuv remove -n <uv_environment>" >&2
        return 1
    fi

    if [ ! -d "$VUV_VENV/$uv_environment" ]; then
        echo "uv environment $uv_environment does not exist"
        return 1
    fi

    if [[ "$VIRTUAL_ENV" == "$VUV_VENV/$uv_environment" ]]; then
        vuv_deactivate
    fi

    echo "Removing uv environment: $uv_environment"
    rm -rf "$VUV_VENV/$uv_environment"
    echo "uv environment $uv_environment removed"
}

vuv_list() {
    echo "uv environment dir: $VUV_VENV"
    if [ -z "$(ls -A "$VUV_VENV")" ]; then
        echo "No uv environment found"
    else
        ls -1 "$VUV_VENV"
    fi
}

vuv_activate() {
    if [ -z "$1" ]; then
        echo "Usage: vuv activate <uv_environment>"
        return 1
    fi

    uv_environment="$1"

    if [ ! -d "$VUV_VENV/$uv_environment" ]; then
        echo "uv environment $uv_environment does not exist"
        return 1
    fi
    vuv_deactivate
    # 首先尝试/bin/activate，如果不存在则尝试Scripts\activate
    if [ -f "$VUV_VENV/$uv_environment/bin/activate" ]; then
        source "$VUV_VENV/$uv_environment/bin/activate"
    elif [ -f "$VUV_VENV/$uv_environment/Scripts/activate" ]; then
        source "$VUV_VENV/$uv_environment/Scripts/activate"
    else
        echo "Error: Failed to activate uv environment" >&2
        return 1
    fi
    echo "Activated uv environment: $uv_environment"
}

vuv_deactivate() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "No uv environment is currently activated"
        return 1
    fi
    echo "Deactivated uv environment: $VIRTUAL_ENV"
    deactivate
}

vuv_install() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "No uv environment is currently activated"
        return 1
    fi
    uv pip install "$@"
}

vuv_help() {
    echo "Usage: vuv <command> [<args>]"
    echo "Commands:"
    echo "  create -n <uv_environment> -p <python_version>"
    echo "  remove -n <uv_environment>"
    echo "  list"
    echo "  activate <uv_environment>"
    echo "  install <package>"
    echo "  deactivate"
    echo "  config --default-index <index_url>"
}

vuv() {
    vuv_check || return 1
    case "$1" in
        create)
            shift
            vuv_create "$@"
            ;;
        remove)
            shift
            vuv_remove "$@"
            ;;
        list)
            vuv_list
            ;;
        activate)
            shift
            vuv_activate "$@"
            ;;
        install)
            shift
            vuv_install "$@"
            ;;
        deactivate)
            vuv_deactivate
            ;;
        config)
            shift
            case "$1" in
                --default-index)
                    shift
                    vuv_set_default_index "$@"
                    ;;
                *)
                    echo "Unsupported config option: $1" >&2
                    echo "Run 'vuv help' for usage" >&2
                    return 1
                    ;;
            esac
            ;;
        help)
            vuv_help
            ;;
        *)
            echo "Unsupported command: $1"
            echo "Run 'vuv help' for usage"
            return 1
            ;;
    esac
}
